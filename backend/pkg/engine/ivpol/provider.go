package ivpol

import (
	"context"

	"github.com/kyverno/kyverno/api/policies.kyverno.io/v1alpha1"
	"github.com/kyverno/kyverno/pkg/cel/autogen"
	"github.com/kyverno/kyverno/pkg/cel/engine"
	"github.com/kyverno/kyverno/pkg/cel/policy"
	admissionregistrationv1 "k8s.io/api/admissionregistration/v1"
	"k8s.io/apimachinery/pkg/util/sets"
)

func NewProvider(compiler policy.Compiler, policies []v1alpha1.ImageVerificationPolicy, exceptions []*v1alpha1.CELPolicyException) (engine.ImageVerifyPolProviderFunc, error) {
	compiled := make([]engine.CompiledImageVerificationPolicy, 0, len(policies))
	for _, policy := range policies {
		var matchedExceptions []v1alpha1.CELPolicyException
		for _, polex := range exceptions {
			for _, ref := range polex.Spec.PolicyRefs {
				if ref.Name == policy.GetName() && ref.Kind == policy.GetKind() {
					matchedExceptions = append(matchedExceptions, *polex)
				}
			}
		}
		actions := sets.New(policy.Spec.ValidationAction...)
		if len(actions) == 0 {
			actions.Insert(admissionregistrationv1.Deny)
		}
		compiled = append(compiled, engine.CompiledImageVerificationPolicy{
			Actions: actions,
			Policy:  &policy,
		})

		autogeneratedIvPols, err := autogen.GetAutogenRulesImageVerify(&policy)
		if err != nil {
			return nil, err
		}

		for _, ap := range autogeneratedIvPols {
			compiled = append(compiled, engine.CompiledImageVerificationPolicy{
				Actions: actions,
				Policy: &v1alpha1.ImageVerificationPolicy{
					ObjectMeta: ap.ObjectMeta,
					Spec:       ap.Spec,
				},
			})
		}
	}
	provider := func(context.Context) ([]engine.CompiledImageVerificationPolicy, error) {
		return compiled, nil
	}
	return provider, nil
}
